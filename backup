// This is main package
package main

import (
	"fmt"
	"io/fs"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/charmbracelet/lipgloss"
	log "github.com/sirupsen/logrus"
)

type repo struct {
	path      string
	name      string
	defBranch string
}

const (
	maxDepth = 2
	basePath = "~/work"
)

func main() {
	repos, err := getRepos()
	if err != nil {
		log.Fatal(err)
	}

	log.Infof("%v", repos)
	log.Infof("%d", len(repos))
}

func getRepos() (repos []repo, err error) {
	baseDepth := strings.Count(basePath, string(os.PathSeparator))
	err = filepath.WalkDir(basePath, func(p string, info fs.DirEntry, err error) error {
		if err != nil {
			log.Fatal(err)
		}

		if !info.IsDir() {
			return nil
		}

		if info.IsDir() && strings.Count(p, string(os.PathSeparator)) > (baseDepth+maxDepth+1) { //* we need +1 depth to be able to found .git directories
			return filepath.SkipDir
		}

		if info.Name() == ".git" {
			dir, _ := path.Split(p)
			repos = append(repos, repo{path: dir, name: strings.Trim(dir[len(basePath):], string(os.PathSeparator)), defBranch: "main"})
		}

		return nil
	})
	return
}
